# Root logger option
log4j.rootLogger=DEBUG, stdout, file

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

# Redirect log messages to a log file, support file rolling.
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=log4j-application.log
log4j.appender.file.MaxFileSize=5MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

#Шаблон(layout) вывода лога
#
#А вот layout это тоже очень интересная штука, он определяет как форматировать вывод в лог. В примере выше для этого используется класс org.apache.log4j.PatternLayout, и мне, честно говоря, даже не приходило в голову проверять есть ли другие форматтеры, т.к. его всегда было достаточно. Возможно для лога в какой-нибудь xml и понадобится другой форматтер, но имхо это совсем редкость. Так вот, данный форматтер принимает параметром conversionPattern, шаблон вывода лога, о нем подробней:
#
#%d{ABSOLUTE}
#    Выводит время. В скобках можно указать формат вывода, о нем подробней можно прочитать в хэлпе к стандартному классу SimpleDateFormat. И еще можно использовать именованные шаблоны, как в данном случае, это ISO8601 и ABSOLUTE. Последний означает формат HH:mm:ss,SSS, по мне так наиболее удобный вид для лога, если они не хранятся неделями и месяцами.
#%5p
#    Выводит уровень лога (ERROR, DEBUG, INFO и пр.), цифра 5 означает что всегда использовать 5 символов, остальное дополнится пробелами
#%t
#    Выводит имя потока который вывел сообщение
#%c{1}
#    Категория, в скобках указывается сколько уровней выдавать. Категорией в нашем случае будет имя класса с пакетом. Ну а вообще это строка, где уровни разделены точками. Т.к. у нас совпадает с полным именем класса, то верхний уровень будет являться именем класса
#%M
#    Имя метода в котором произошёл вызов записи в лог
#%L
#    Номер строки в которой произошёл вызов записи в лог
#%m
#    Сообщение, которое передали в лог
#%n
#    Перевод строки
#
#Более подробно модно посмотреть в JavaDoc для класса PatternLayout.
#На самом деле можно не вдаваться в подробности этого шаблона, а использовать именно тот который у меня в примере, он у меня кучу лет как через copy & paste пишется, и всегда его хватало.
